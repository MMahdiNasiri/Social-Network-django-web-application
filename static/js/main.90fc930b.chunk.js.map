{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","tweetsEl","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.90fc930b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {useEffect, useState} from 'react'\r\n\r\nimport {loadTweets} from '../lookup'\r\n\r\n\r\nexport function TweetsComponent(props){\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 23\r\n        })\r\n        setNewTweets(tempNewTweets)\r\n        textAreaRef.current.value = ''\r\n    }\r\n    return(\r\n    <div className={props.className}>\r\n        <div className='col-12 mb-3'>\r\n        <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n            </textarea>\r\n            <button type='submit' className='btn btn-primary my-3' >Tweet</button>\r\n        </form>\r\n        </div>\r\n        <TweetsList newTweets={newTweets} />\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport function TweetsList(props){\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length){\r\n            setTweets(final)\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n    useEffect(() =>{\r\n    const myCallback = (response, status) =>{\r\n        if (status === 200){\r\n            setTweetsInit(response)\r\n        }else{\r\n            alert(\"there is an error\")\r\n        }\r\n    }\r\n    loadTweets(myCallback)\r\n    }, [])\r\n    return tweets.map((item, index)=>{\r\n                return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={'${index}-{item.id}'}/>\r\n            })\r\n}\r\n\r\n\r\n\r\nexport function ActionBtn(props){\r\n    const {tweet, action} = props\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\r\n    const [userLike, setUserLike] = useState(tweet.userLike ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm';\r\n    const actionDisplay = action.display ? action.display : \"Action\";\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like'){\r\n            if(userLike === true){\r\n                setLikes(likes - 1)\r\n                setUserLike(false)\r\n            }else{\r\n                setLikes(likes + 1)\r\n                setUserLike(true)\r\n            }\r\n        }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay ;\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}\r\n\r\nexport function Tweet(props){\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\r\n    return <div className={className}>\r\n        <p>{tweet.id} - {tweet.content}</p>\r\n        <div className='btn btn-group'>\r\n            <ActionBtn tweet={tweet} action={{type: \"like\", display: \"Likes\"}}/>\r\n            <ActionBtn tweet={tweet} action={{type: \"unlike\", display: \"Unlike\"}}/>\r\n            <ActionBtn tweet={tweet} action={{type: \"retweet\", display: \"Reetweet\"}}/>\r\n        </div>\r\n    </div>\r\n}\r\n","\r\n\r\nexport function loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = 'http://localhost:8000/api/tweets'\r\n    const responseType = 'json'\r\n\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n\r\n    xhr.onload = function(){\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n        callback({\"message\": \"the rrequest err\"}, 400)\r\n    }\r\n    xhr.send()\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n            <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst tweetsEl = document.getElementById(\"tweets\");\nif (tweetsEl){\n    ReactDOM.render(<TweetsComponent />, tweetsEl);\n}\n\n//ReactDOM.render(\n//  <React.StrictMode>\n//    <App />\n//  </React.StrictMode>,\n//  document.getElementById('root')\n//);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}